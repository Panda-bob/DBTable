// File: msg_config.h
// Auth: generated by auto tool 'lazybone'
// Desc: message define
// 中心服务配置


#ifndef _MESSAGE_MSG_CONFIG_H_
#define _MESSAGE_MSG_CONFIG_H_

#include "xcore_define.h"
#include "aone2_message_body.h"
#include "aone2_define.h"
#include "aone2_message.h"

namespace message {

////////////////////////////////////////////////////////////////////////////////
// 日志系统信息
// class LogInfo
////////////////////////////////////////////////////////////////////////////////
class LogInfo : public Aone2MessageBody
{
public:
	LogInfo();

	virtual ~LogInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	uint32  m_level;  // 日志级别(level 0:none, 1:crash, 2:error, 3:warning, 4:notice, 5:info, 6:debug, 7:trace)
	uint32  m_keep_days;  // 日志保留天数
	uint16  m_port;  // 监听端口(0表示不监听)
};

////////////////////////////////////////////////////////////////////////////////
// 服务信息
// class ServerInfo
////////////////////////////////////////////////////////////////////////////////
class ServerInfo : public Aone2MessageBody
{
public:
	ServerInfo();

	virtual ~ServerInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	string  m_host;  // 服务地址或IP
	uint16  m_port;  // 服务监听端口
};

////////////////////////////////////////////////////////////////////////////////
// (安全通信)服务信息
// class SecurityServerInfo
////////////////////////////////////////////////////////////////////////////////
class SecurityServerInfo : public Aone2MessageBody
{
public:
	SecurityServerInfo();

	virtual ~SecurityServerInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	string  m_host;  // 服务地址或IP
	uint16  m_port;  // 服务监听端口
	string  m_key;  // RC4加密key
};

////////////////////////////////////////////////////////////////////////////////
// 监听信息
// class ListenInfo
////////////////////////////////////////////////////////////////////////////////
class ListenInfo : public Aone2MessageBody
{
public:
	ListenInfo();

	virtual ~ListenInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	string  m_ip;  // 监听IP(若监听本机所有IP则置为空)
	uint16  m_port;  // 监听端口
};

////////////////////////////////////////////////////////////////////////////////
// (安全通信)监听信息
// class SecurityListenInfo
////////////////////////////////////////////////////////////////////////////////
class SecurityListenInfo : public Aone2MessageBody
{
public:
	SecurityListenInfo();

	virtual ~SecurityListenInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	string  m_ip;  // 监听IP(若监听本机所有IP则置为空)
	uint16  m_port;  // 监听端口
	string  m_key;  // RC4加密key
};

////////////////////////////////////////////////////////////////////////////////
// mysql数据库信息
// class MysqlInfo
////////////////////////////////////////////////////////////////////////////////
class MysqlInfo : public Aone2MessageBody
{
public:
	MysqlInfo();

	virtual ~MysqlInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	string  m_host;  // 主机或IP
	uint16  m_port;  // 端口
	string  m_user;  // 用户名
	string  m_password;  // 密码
	string  m_scheme;  // 选择库
	string  m_name;  // 该库名字(库名字不要重复)
	string  m_group;  // 该库所属分组(用于作集群负载)
};

////////////////////////////////////////////////////////////////////////////////
// 阿里云短信服务配置信息
// class AliyunSmsInfo
////////////////////////////////////////////////////////////////////////////////
class AliyunSmsInfo : public Aone2MessageBody
{
public:
	AliyunSmsInfo();

	virtual ~AliyunSmsInfo();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	string  m_id;  // Access Key ID
	string  m_secret;  // Access Key Secret
	string  m_sign_name;  // 管理控制台中配置的短信签名
	string  m_template_code;  // 管理控制台中配置的审核通过的短信模板的模板CODE
};

////////////////////////////////////////////////////////////////////////////////
// 游戏服配置信息
// class Config_GameServer
////////////////////////////////////////////////////////////////////////////////
class Config_GameServer : public Aone2MessageBody
{
public:
	Config_GameServer();

	virtual ~Config_GameServer();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	SecurityListenInfo  m_listen_aone_rc4;  // Aone协议RC4加密监听
	ListenInfo  m_listen_http;  // Http协议监听
	LogInfo  m_log_info;  // 日志系统配置
	MysqlInfo  m_mysql_info;  // mysql数据库配置
	AliyunSmsInfo  m_sms_info;  // 短信服务配置
	string  m_jiguang_push_appkey;  // 极光推送的appkey
	string  m_jiguang_push_secret;  // 极光推送的密钥
	SecurityServerInfo  m_npc_server;  // npc服务信息
};

////////////////////////////////////////////////////////////////////////////////
// NPC服配置信息
// class Config_NPCServer
////////////////////////////////////////////////////////////////////////////////
class Config_NPCServer : public Aone2MessageBody
{
public:
	Config_NPCServer();

	virtual ~Config_NPCServer();

	virtual int parse_bytes(const byte* src, uint32 len);

	virtual int to_bytes(byte* dst, uint32 maxlen);

	virtual uint32 calc_length();

	virtual bool parse_json(XJsonValue& json);
	virtual bool to_json(XJsonValue& json);

public:
	SecurityListenInfo  m_listen_aone_rc4;  // Aone协议RC4加密监听
	LogInfo  m_log_info;  // 日志系统配置
	MysqlInfo  m_mysql_info;  // mysql数据库配置
	SecurityServerInfo  m_game_server;  // npc服务信息
};


////////////////////////////////////////////////////////////////////////////////
// message define
////////////////////////////////////////////////////////////////////////////////


}//namespace message

using namespace message;

#endif//_MESSAGE_MSG_CONFIG_H_
