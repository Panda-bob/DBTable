// File: msg_config.cpp
// Auth: generated by auto tool 'lazybone'
// Desc: message define


#include "msg_config.h"
namespace message {

///////////////////////////////////////////////////////////////////////////////
// class LogInfo
///////////////////////////////////////////////////////////////////////////////
LogInfo::LogInfo()
{
	m_level = 5;
	m_keep_days = 30;
	m_port = 0;
}

LogInfo::~LogInfo()
{
	// empty
}

/*int LogInfo::parse_bytes(const byte* src, uint32 len)
{
	if (src == NULL) return -1;
	if (len < sizeof(uint32)) return -1;
	uint32 msglen = *(const uint32*)src;
	if (msglen < sizeof(uint32) || msglen > len) return -1;
	Aone2Decoder decoder(src + sizeof(uint32), msglen - sizeof(uint32));

	// m_level
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_uint32(m_level)) return -1;

	// m_keep_days
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_uint32(m_keep_days)) return -1;

	// m_port
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_uint16(m_port)) return -1;

	return msglen;
}

int LogInfo::to_bytes(byte* dst, uint32 maxlen)
{
	if (dst == NULL) return -1;
	if (maxlen < sizeof(uint32)) return -1;
	Aone2Coder coder(dst + sizeof(uint32), maxlen - sizeof(uint32));

	// m_level
	if (!coder.set_uint32(m_level)) return -1;

	// m_keep_days
	if (!coder.set_uint32(m_keep_days)) return -1;

	// m_port
	if (!coder.set_uint16(m_port)) return -1;

	*(uint32*)dst = (coder.position() - dst);
	return *(uint32*)dst;
}

uint32 LogInfo::calc_length()
{
	uint32 length = 0;

	// m_level
	length += Aone2Coder::size_uint32(m_level);

	// m_keep_days
	length += Aone2Coder::size_uint32(m_keep_days);

	// m_port
	length += Aone2Coder::size_uint16(m_port);

	return length + sizeof(uint32);
}*/

bool LogInfo::parse_json(XJsonValue& json)
{
	if(json.type() != XJsonValue::objectValue) return false;

	// m_level
	XJsonValue& level = json.as_objects()["level"];
	if (level.type() == XJsonValue::nullValue) return true;
	if (level.type() != XJsonValue::intValue) return false;
	m_level = (uint32)level.as_int();

	// m_keep_days
	XJsonValue& keep_days = json.as_objects()["keep_days"];
	if (keep_days.type() == XJsonValue::nullValue) return true;
	if (keep_days.type() != XJsonValue::intValue) return false;
	m_keep_days = (uint32)keep_days.as_int();

	// m_port
	XJsonValue& port = json.as_objects()["port"];
	if (port.type() == XJsonValue::nullValue) return true;
	if (port.type() != XJsonValue::intValue) return false;
	m_port = (uint16)port.as_int();

	return true;
}

bool LogInfo::to_json(XJsonValue& json)
{
	json.type() = XJsonValue::objectValue;

	// m_level
	json.as_objects()["level"] = XJsonValue((int64)m_level);

	// m_keep_days
	json.as_objects()["keep_days"] = XJsonValue((int64)m_keep_days);

	// m_port
	json.as_objects()["port"] = XJsonValue((int64)m_port);

	return true;
}

///////////////////////////////////////////////////////////////////////////////
// class MysqlInfo
///////////////////////////////////////////////////////////////////////////////
MysqlInfo::MysqlInfo()
{
	m_host = "127.0.0.1";
	m_port = 3306;
	m_scheme = "";
	m_name = "";
	m_group = "";
}

MysqlInfo::~MysqlInfo()
{
	// empty
}
/*
int MysqlInfo::parse_bytes(const byte* src, uint32 len)
{
	if (src == NULL) return -1;
	if (len < sizeof(uint32)) return -1;
	uint32 msglen = *(const uint32*)src;
	if (msglen < sizeof(uint32) || msglen > len) return -1;
	Aone2Decoder decoder(src + sizeof(uint32), msglen - sizeof(uint32));

	// m_host
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_host)) return -1;

	// m_port
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_uint16(m_port)) return -1;

	// m_user
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_user)) return -1;

	// m_password
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_password)) return -1;

	// m_scheme
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_scheme)) return -1;

	// m_name
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_name)) return -1;

	// m_group
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_group)) return -1;

	return msglen;
}

int MysqlInfo::to_bytes(byte* dst, uint32 maxlen)
{
	if (dst == NULL) return -1;
	if (maxlen < sizeof(uint32)) return -1;
	Aone2Coder coder(dst + sizeof(uint32), maxlen - sizeof(uint32));

	// m_host
	if (!coder.set_string(m_host)) return -1;

	// m_port
	if (!coder.set_uint16(m_port)) return -1;

	// m_user
	if (!coder.set_string(m_user)) return -1;

	// m_password
	if (!coder.set_string(m_password)) return -1;

	// m_scheme
	if (!coder.set_string(m_scheme)) return -1;

	// m_name
	if (!coder.set_string(m_name)) return -1;

	// m_group
	if (!coder.set_string(m_group)) return -1;

	*(uint32*)dst = (coder.position() - dst);
	return *(uint32*)dst;
}

uint32 MysqlInfo::calc_length()
{
	uint32 length = 0;

	// m_host
	length += Aone2Coder::size_string(m_host);

	// m_port
	length += Aone2Coder::size_uint16(m_port);

	// m_user
	length += Aone2Coder::size_string(m_user);

	// m_password
	length += Aone2Coder::size_string(m_password);

	// m_scheme
	length += Aone2Coder::size_string(m_scheme);

	// m_name
	length += Aone2Coder::size_string(m_name);

	// m_group
	length += Aone2Coder::size_string(m_group);

	return length + sizeof(uint32);
}*/

bool MysqlInfo::parse_json(XJsonValue& json)
{
	if(json.type() != XJsonValue::objectValue) return false;

	// m_host
	XJsonValue& host = json.as_objects()["host"];
	if (host.type() == XJsonValue::nullValue) return true;
	if (host.type() != XJsonValue::stringValue) return false;
	m_host = (string)host.as_string();

	// m_port
	XJsonValue& port = json.as_objects()["port"];
	if (port.type() == XJsonValue::nullValue) return true;
	if (port.type() != XJsonValue::intValue) return false;
	m_port = (uint16)port.as_int();

	// m_user
	XJsonValue& user = json.as_objects()["user"];
	if (user.type() == XJsonValue::nullValue) return true;
	if (user.type() != XJsonValue::stringValue) return false;
	m_user = (string)user.as_string();

	// m_password
	XJsonValue& password = json.as_objects()["password"];
	if (password.type() == XJsonValue::nullValue) return true;
	if (password.type() != XJsonValue::stringValue) return false;
	m_password = (string)password.as_string();

	// m_scheme
	XJsonValue& scheme = json.as_objects()["scheme"];
	if (scheme.type() == XJsonValue::nullValue) return true;
	if (scheme.type() != XJsonValue::stringValue) return false;
	m_scheme = (string)scheme.as_string();

	// m_name
	XJsonValue& name = json.as_objects()["name"];
	if (name.type() == XJsonValue::nullValue) return true;
	if (name.type() != XJsonValue::stringValue) return false;
	m_name = (string)name.as_string();

	// m_group
	XJsonValue& group = json.as_objects()["group"];
	if (group.type() == XJsonValue::nullValue) return true;
	if (group.type() != XJsonValue::stringValue) return false;
	m_group = (string)group.as_string();

	return true;
}

bool MysqlInfo::to_json(XJsonValue& json)
{
	json.type() = XJsonValue::objectValue;

	// m_host
	json.as_objects()["host"] = XJsonValue(m_host);

	// m_port
	json.as_objects()["port"] = XJsonValue((int64)m_port);

	// m_user
	json.as_objects()["user"] = XJsonValue(m_user);

	// m_password
	json.as_objects()["password"] = XJsonValue(m_password);

	// m_scheme
	json.as_objects()["scheme"] = XJsonValue(m_scheme);

	// m_name
	json.as_objects()["name"] = XJsonValue(m_name);

	// m_group
	json.as_objects()["group"] = XJsonValue(m_group);

	return true;
}


///////////////////////////////////////////////////////////////////////////////
// class ConfigServer
///////////////////////////////////////////////////////////////////////////////
ConfigServer::ConfigServer()
{
}

ConfigServer::~ConfigServer()
{
	// empty
}
/*
int ConfigServer::parse_bytes(const byte* src, uint32 len)
{
	if (src == NULL) return -1;
	if (len < sizeof(uint32)) return -1;
	uint32 msglen = *(const uint32*)src;
	if (msglen < sizeof(uint32) || msglen > len) return -1;
	Aone2Decoder decoder(src + sizeof(uint32), msglen - sizeof(uint32));

	// m_listen_aone_rc4
	if (decoder.remain() == 0) return msglen;
	int listen_aone_rc4_ret = m_listen_aone_rc4.parse_bytes(decoder.position(), decoder.remain());
	if (listen_aone_rc4_ret <= 0) return listen_aone_rc4_ret;
	if (!decoder.set_pos(decoder.position() + listen_aone_rc4_ret)) return -1;

	// m_listen_http
	if (decoder.remain() == 0) return msglen;
	int listen_http_ret = m_listen_http.parse_bytes(decoder.position(), decoder.remain());
	if (listen_http_ret <= 0) return listen_http_ret;
	if (!decoder.set_pos(decoder.position() + listen_http_ret)) return -1;

	// m_log_info
	if (decoder.remain() == 0) return msglen;
	int log_info_ret = m_log_info.parse_bytes(decoder.position(), decoder.remain());
	if (log_info_ret <= 0) return log_info_ret;
	if (!decoder.set_pos(decoder.position() + log_info_ret)) return -1;

	// m_mysql_info
	if (decoder.remain() == 0) return msglen;
	int mysql_info_ret = m_mysql_info.parse_bytes(decoder.position(), decoder.remain());
	if (mysql_info_ret <= 0) return mysql_info_ret;
	if (!decoder.set_pos(decoder.position() + mysql_info_ret)) return -1;

	// m_sms_info
	if (decoder.remain() == 0) return msglen;
	int sms_info_ret = m_sms_info.parse_bytes(decoder.position(), decoder.remain());
	if (sms_info_ret <= 0) return sms_info_ret;
	if (!decoder.set_pos(decoder.position() + sms_info_ret)) return -1;

	// m_jiguang_push_appkey
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_jiguang_push_appkey)) return -1;

	// m_jiguang_push_secret
	if (decoder.remain() == 0) return msglen;
	if (!decoder.get_string(m_jiguang_push_secret)) return -1;

	// m_npc_server
	if (decoder.remain() == 0) return msglen;
	int npc_server_ret = m_npc_server.parse_bytes(decoder.position(), decoder.remain());
	if (npc_server_ret <= 0) return npc_server_ret;
	if (!decoder.set_pos(decoder.position() + npc_server_ret)) return -1;

	return msglen;
}

int ConfigServer::to_bytes(byte* dst, uint32 maxlen)
{
	if (dst == NULL) return -1;
	if (maxlen < sizeof(uint32)) return -1;
	Aone2Coder coder(dst + sizeof(uint32), maxlen - sizeof(uint32));

	// m_listen_aone_rc4
	int listen_aone_rc4_ret = m_listen_aone_rc4.to_bytes(coder.position(), coder.remain());
	if (listen_aone_rc4_ret <= 0) return listen_aone_rc4_ret;
	coder.set_pos(coder.position() + listen_aone_rc4_ret);

	// m_listen_http
	int listen_http_ret = m_listen_http.to_bytes(coder.position(), coder.remain());
	if (listen_http_ret <= 0) return listen_http_ret;
	coder.set_pos(coder.position() + listen_http_ret);

	// m_log_info
	int log_info_ret = m_log_info.to_bytes(coder.position(), coder.remain());
	if (log_info_ret <= 0) return log_info_ret;
	coder.set_pos(coder.position() + log_info_ret);

	// m_mysql_info
	int mysql_info_ret = m_mysql_info.to_bytes(coder.position(), coder.remain());
	if (mysql_info_ret <= 0) return mysql_info_ret;
	coder.set_pos(coder.position() + mysql_info_ret);

	// m_sms_info
	int sms_info_ret = m_sms_info.to_bytes(coder.position(), coder.remain());
	if (sms_info_ret <= 0) return sms_info_ret;
	coder.set_pos(coder.position() + sms_info_ret);

	// m_jiguang_push_appkey
	if (!coder.set_string(m_jiguang_push_appkey)) return -1;

	// m_jiguang_push_secret
	if (!coder.set_string(m_jiguang_push_secret)) return -1;

	// m_npc_server
	int npc_server_ret = m_npc_server.to_bytes(coder.position(), coder.remain());
	if (npc_server_ret <= 0) return npc_server_ret;
	coder.set_pos(coder.position() + npc_server_ret);

	*(uint32*)dst = (coder.position() - dst);
	return *(uint32*)dst;
}

uint32 ConfigServer::calc_length()
{
	uint32 length = 0;

	// m_listen_aone_rc4
	length += m_listen_aone_rc4.calc_length();

	// m_listen_http
	length += m_listen_http.calc_length();

	// m_log_info
	length += m_log_info.calc_length();

	// m_mysql_info
	length += m_mysql_info.calc_length();

	// m_sms_info
	length += m_sms_info.calc_length();

	// m_jiguang_push_appkey
	length += Aone2Coder::size_string(m_jiguang_push_appkey);

	// m_jiguang_push_secret
	length += Aone2Coder::size_string(m_jiguang_push_secret);

	// m_npc_server
	length += m_npc_server.calc_length();

	return length + sizeof(uint32);
}*/

bool ConfigServer::parse_json(XJsonValue& json)
{
	if(json.type() != XJsonValue::objectValue) return false;

	// m_log_info
	XJsonValue& log_info = json.as_objects()["log_info"];
	if (log_info.type() == XJsonValue::nullValue) return true;
	if (!m_log_info.parse_json(log_info)) return false;

	// m_mysql_info
	XJsonValue& mysql_info = json.as_objects()["mysql_info"];
	if (mysql_info.type() == XJsonValue::nullValue) return true;
	if (!m_mysql_info.parse_json(mysql_info)) return false;

	return true;
}


bool ConfigServer::to_json(XJsonValue& json)
{
	json.type() = XJsonValue::objectValue;

	

	// m_log_info
	XJsonValue& log_info = json.as_objects()["log_info"];
	if (!m_log_info.to_json(log_info)) return false;

	// m_mysql_info
	XJsonValue& mysql_info = json.as_objects()["mysql_info"];
	if (!m_mysql_info.to_json(mysql_info)) return false;

	return true;
}

}//namespace message
